generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  image        String
  technologies String[]
  githubUrl    String
  liveUrl      String?
  featured     Boolean  @default(false)
  order        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Skill {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  proficiency Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model About {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  bio          String
  profileImage String
  email        String
  updatedAt    DateTime @updatedAt
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  imageBlog   String?  // Optional image for the blog
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  blogTags    BlogTag[] // Explicit many-to-many relationship using BlogTag
}

model Tag {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  blogTags BlogTag[] // Explicit many-to-many relationship using BlogTag
}

model BlogTag {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  blogId  String @db.ObjectId
  tagId   String @db.ObjectId

  blog    Blog   @relation(fields: [blogId], references: [id])
  tag     Tag    @relation(fields: [tagId], references: [id])

  @@unique([blogId, tagId]) // Unique constraint instead of composite primary key
}
